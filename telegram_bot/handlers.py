from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import aiohttp
import requests
import asyncio
import logging
import re
import os
from slugify import slugify
from unidecode import unidecode
from authorization import add_user, init_db, get_user_id
from QRcode import generate_qr


API_URL = os.environ.get("API_URL", "http://127.0.0.1:5000")
logger = logging.getLogger(__name__)

async def start_command(message: types.Message):
    await message.reply('–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–º–æ—á—å! –û–±—Ä–∞—â–∞–π—Å—è'
    '\n\n–ù–∞–∂–º–∏ /help, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é')

async def help_command(message: types.Message):
    await message.reply('''–î–∞–≤–∞–π —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ, —á–µ–º—É —è —É–∂–µ –Ω–∞—É—á–∏–ª—Å—è. –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∏–º–∞–π –Ω–∞ —ç—Ç–æ —Å–ª–æ–≤–æ! üê¢

/review - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –Ω–∞ –Ω–∞—à—É –∫–ª–∏–Ω–∏–∫—É

/price - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ —É—Å–ª—É–≥–∏

/faq - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –ø–æ—á–∏—Ç–∞—Ç—å —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã

/schedule - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –∫–ª–∏–Ω–∏–∫–∏

/contacts - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –≥–¥–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞—à–∏ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –∏ –∏—Ö –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤

/recomendation - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Å–¥–∞—á–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤
                        
/remind - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–± —è —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏–ª –≤—ã–ø–∏—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É –∏–ª–∏ –æ –∑–∞–ø–∏—Å–∏ –∫ –≤—Ä–∞—á—É (–Ω–∞–ø–æ–º–Ω—é –∑–∞ –¥–µ–Ω—å –∏ –∑–∞ –¥–≤–∞ —á–∞—Å–∞)
                        
/operator - –µ—Å–ª–∏ —Ö–æ—á–µ—à—å, —á—Ç–æ–± —Å —Ç–æ–±–æ–π —Å–≤—è–∑–∞–ª–∏—Å—å –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞–∫–æ–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        
–ê –µ—Å–ª–∏ —Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—à—å –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–æ–≤, —Ç–æ —è –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å, –∫–∞–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤—ã—à–µ, –Ω–∏–∂–µ –∏–ª–∏ –≤ –Ω–æ—Ä–º–µ, –¥–∞—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∞ —Ç–∞–∫–∂–µ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ä–æ—á–Ω–æ—Å—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –≤—Ä–∞—á—É. –ù–æ –Ω–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ —è –≤—Å–µ–≥–æ –ª–∏—à—å —á–µ—Ä–µ–ø–∞—à–∫–∞, –∞ –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–π –≤—Ä–∞—á

–¢–∞–∫–∂–µ —è —É–º–µ—é –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ, –Ω–æ –∏ –µ—Å–ª–∏ —Ç—ã –ø–æ–ø—Ä–æ—Å–∏—à—å –º–µ–Ω—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. –ê –µ—â–µ —è –º–æ–≥—É —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö. –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å? ‚ò∫Ô∏è''')

async def schedule_command(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –∏–∑ API
        response = await asyncio.to_thread(requests.get, f"{API_URL}/schedule")
        response.raise_for_status()
        
        data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if not isinstance(data, dict) or 'data' not in data:
            await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        schedule_text = data['data']
        
        if not schedule_text:
            await message.reply("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        schedule_lines = schedule_text.split('\n')
        formatted_schedule = "üïí –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã –∫–ª–∏–Ω–∏–∫–∏:\n\n" + "\n".join(
            f"‚Ä¢ {line}" for line in schedule_lines
        )
        
        await message.reply(formatted_schedule)
            
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: {e}")
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

async def contacts_command(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –∏–∑ API
        response = await asyncio.to_thread(requests.get, f"{API_URL}/contacts")
        response.raise_for_status()
        
        data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if not isinstance(data, dict) or 'data' not in data:
            await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        contacts = data['data']
        
        if not contacts:
            await message.reply("–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        formatted_contacts = []
        for i, contact in enumerate(contacts, 1):
            # –†–∞–∑–¥–µ–ª—è–µ–º –∞–¥—Ä–µ—Å –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
            parts = contact.split(" –¢–µ–ª–µ—Ñ–æ–Ω")
            address = parts[0].replace("–ê–¥—Ä–µ—Å: ", "").strip()
            phone = "–¢–µ–ª–µ—Ñ–æ–Ω" + parts[1] if len(parts) > 1 else ""
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
            contact_entry = f"{i}. {address}"
            if phone:
                contact_entry += f"\n   {phone}"
            
            formatted_contacts.append(contact_entry)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏
        contacts_message = "üìå –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–ª–∏–Ω–∏–∫–∏:\n\n" + "\n\n".join(formatted_contacts)
        await message.reply(contacts_message)
            
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {e}")
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")

async def unknown_command(message: types.Message):
    if message.text.startswith('/'):
        await message.reply('''–ò–∑–≤–∏–Ω–∏, —Å —ç—Ç–∏–º —è –ø–æ–º–æ—á—å –Ω–µ –º–æ–≥—É(

–ù–æ —Ç—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—à—å –ø–æ–∑–≤–æ–Ω–∏—Ç—å –≤ –∫–ª–∏–Ω–∏–∫—É –∏ —Ç–∞–º —Ç–µ–±–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Å–∫–∞–∂—É—Ç!
–í–æ—Ç –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ 8 (3022) 73-70-73üê¢''')

def clean_specialty(specialty):
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤–∞, –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–¥–µ–∂ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å."""
    if not specialty:
        return ""
    
    stop_words = {"–≤—Ä–∞—á–∞", "–ø–µ—Ä–≤–∏—á–Ω—ã–π", "–¥–ª—è", "–Ω–∞", "–ø–æ", "–≤", "–∏", "–∏–∑", "—Å", 
                 "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–π", "–¥–æ–∫—Ç–æ—Ä", "—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", "–ø—Ä–∏–µ–º", "–æ—Å–º–æ—Ç—Ä", "–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"}
    
    # –£–¥–∞–ª—è–µ–º "–≤—Ä–∞—á–∞-" –≤ –Ω–∞—á–∞–ª–µ
    specialty = re.sub(r'^–≤—Ä–∞—á–∞[- ]?', '', specialty, flags=re.IGNORECASE)
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–ª–æ–≤–∞ (–≤–∫–ª—é—á–∞—è —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ '-')
    words = re.split(r'[\s\-]+', specialty.strip().lower())

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞ –∏ —É–±–∏—Ä–∞–µ–º "–∞" –Ω–∞ –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞
    cleaned_words = []
    for word in words:
        if word not in stop_words:
            # –£–¥–∞–ª—è–µ–º –æ–∫–æ–Ω—á–∞–Ω–∏–µ "–∞" —Ç–æ–ª—å–∫–æ —É —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –∂–µ–Ω—Å–∫–æ–≥–æ —Ä–æ–¥–∞
            if word.endswith('–∞') and len(word) > 1:
                word = word[:-1]
            cleaned_words.append(word.capitalize())

    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–µ—Ñ–∏—Å—ã –º–µ–∂–¥—É —Å–æ—Å—Ç–∞–≤–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    result = " ".join(cleaned_words)
    return result.replace(" - ", "-").title()

async def price_command(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –∏–∑ API
        response = await asyncio.to_thread(requests.get, f"{API_URL}/price")
        response.raise_for_status()
        data = response.json()

        if not isinstance(data, dict) or 'data' not in data:
            await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return

        services = data['data']
        if not services:
            await message.reply("–î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Å–ª—É–≥–∏ –ø–æ –≤—Ä–∞—á–∞–º
        categories = {}
        for service in services:
            specialty = service['doctor_specialty']
            cleaned_specialty = clean_specialty(specialty)
            
            if cleaned_specialty not in categories:
                categories[cleaned_specialty] = []
            categories[cleaned_specialty].append(service)

        # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardBuilder()
        for specialty in sorted(categories.keys()):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_name = specialty
            callback_data = f"specialty_{slugify(specialty, separator='_')}"
            
            keyboard.button(text=display_name, callback_data=callback_data)

        keyboard.adjust(2)
        await message.reply("–í—ã–±–µ—Ä–∏ –≤—Ä–∞—á–∞:", reply_markup=keyboard.as_markup())

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ price_command: {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö")


async def process_specialty_selection(callback_query: types.CallbackQuery):
    try:
        await callback_query.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")

        # –ü–æ–ª—É—á–∞–µ–º slug –∏–∑ callback_data
        specialty_slug = callback_query.data.replace("specialty_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ª—É–≥–∏
        response = await asyncio.to_thread(requests.get, f"{API_URL}/price")
        response.raise_for_status()
        services = response.json()['data']

        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —É—Å–ª—É–≥–∏, –≥–¥–µ slug —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        found_services = []
        for service in services:
            if specialty_slug == slugify(clean_specialty(service['doctor_specialty']), separator='_'):
                found_services.append(service)

        if not found_services:
            await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–∞—á–∞.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –æ—á–∏—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        specialty_name = clean_specialty(found_services[0]['doctor_specialty'])

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        message_text = f"<b>üè• {specialty_name}</b>\n\n"
        for service in found_services:
            price = f"{service['price']:,.2f} ‚ÇΩ".replace(',', ' ')
            message_text += (
                f"‚Ä¢ <b>{service['service_name']}</b>\n"
                f"  <i>{service.get('appointment_type', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}</i>\n"
                f"  <b>{price}</b>\n\n"
            )

        await callback_query.message.answer(message_text, parse_mode="HTML")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_specialty_selection: {e}", exc_info=True)
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤—Ä–∞—á–µ.")


# –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è callback_data —Å –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º

async def recomendation_command(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –∏–∑ API
        response = await asyncio.to_thread(requests.get, f"{API_URL}/recomendation")
        response.raise_for_status()
        
        data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if not isinstance(data, dict) or 'data' not in data:
            await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
            return
            
        recommendations = data['data']
        
        if not recommendations:
            await message.reply("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        keyboard = InlineKeyboardBuilder()
        
        for item in recommendations:
            analysis_type = item['analysis_type']
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º slugify –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è callback_data
            callback_data = f"rec_{slugify(analysis_type, separator='_')}"
            keyboard.button(text=analysis_type, callback_data=callback_data)
        
        # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥—É
        keyboard.adjust(2)
        
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏ –∞–Ω–∞–ª–∏–∑, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ:",
            reply_markup=keyboard.as_markup()
        )
            
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º.")
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")

async def recomendation_callback_handler(callback_query: types.CallbackQuery):
    try:
        await callback_query.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º slug –∞–Ω–∞–ª–∏–∑–∞ –∏–∑ callback_data
        analysis_slug = callback_query.data.replace("rec_", "")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        response = await asyncio.to_thread(requests.get, f"{API_URL}/recomendation")
        response.raise_for_status()
        recommendations = response.json()['data']
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω—É–∂–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        selected_analysis = None
        for item in recommendations:
            if analysis_slug == slugify(item['analysis_type'], separator='_'):
                selected_analysis = item
                break
        
        if not selected_analysis:
            await callback_query.message.answer("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
        analysis_type = selected_analysis['analysis_type']
        rec_list = selected_analysis['recommendations']
        
        analysis_block = f"<b>üî¨ {analysis_type.upper()}</b>\n\n"
        for point in rec_list:
            analysis_block += f"‚ñ™Ô∏è {point.strip()}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
        await callback_query.message.answer(analysis_block, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ recomendation_callback_handler: {e}", exc_info=True)
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")


async def faq_command(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å API
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/faq") as response:
                if response.status != 200:
                    error_text = await response.text()
                    await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                    return

                questions = await response.json()

                # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–Ω–æ–ø–æ–∫
                buttons = []
                for item in questions:
                    try:
                        if isinstance(item, dict) and 'id' in item and 'question' in item:
                            buttons.append(
                                types.InlineKeyboardButton(
                                    text=item['question'][:64],  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
                                    callback_data=f"faq_{item['id']}"
                                )
                            )
                    except Exception:
                        continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã

                # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
                if not buttons:
                    await message.answer("‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.")
                    return

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —è–≤–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º inline_keyboard
                keyboard = types.InlineKeyboardMarkup(
                    inline_keyboard=[[btn] for btn in buttons]  # –ö–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É
                )

                await message.answer(
                    "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:",
                    reply_markup=keyboard
                )

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}")

    except aiohttp.ClientError as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}")
    except Exception as e:
        await message.answer(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


async def faq_callback_handler(callback_query: types.CallbackQuery):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞
        try:
            faq_id = int(callback_query.data.split('_')[1])
        except (IndexError, ValueError):
            await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–æ–ø—Ä–æ—Å–∞", show_alert=True)
            return

        async with aiohttp.ClientSession() as session:
            async with session.get(f"{API_URL}/faq/{faq_id}") as response:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                if response.status != 200:
                    error_text = await response.text()
                    await callback_query.answer(
                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Ç–≤–µ—Ç (–∫–æ–¥ {response.status})",
                        show_alert=True
                    )
                    return

                # –ü–∞—Ä—Å–∏–º JSON
                try:
                    faq = await response.json()
                except Exception as e:
                    await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –æ—Ç–≤–µ—Ç–∞", show_alert=True)
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
                if not isinstance(faq, dict) or 'question' not in faq or 'answer' not in faq:
                    await callback_query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞", show_alert=True)
                    return

                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
                answer = (
                    f"<b>‚ùì –í–æ–ø—Ä–æ—Å:</b>\n{faq['question']}\n\n"
                    f"<b>üí° –û—Ç–≤–µ—Ç:</b>\n{faq['answer']}"
                )
                
                try:
                    await callback_query.message.answer(answer, parse_mode='HTML')
                    await callback_query.answer()
                except Exception as e:
                    await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}", show_alert=True)

    except aiohttp.ClientError as e:
        await callback_query.answer(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {str(e)}", show_alert=True)
    except Exception as e:
        await callback_query.answer(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

async def review(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É —Å —Å—Å—ã–ª–∫–æ–π
    review_button = InlineKeyboardButton(
        text="–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", 
        url="https://2gis.ru/chita/firm/9007727535719962/tab/reviews/addreview"
    )
    
    # –ü–µ—Ä–µ–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[review_button]])
    
    await message.answer(
        "–¢—ã –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –Ω–∞—Å –Ω–∞ 2–ì–ò–°, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–æ—á–∫—É –Ω–∏–∂–µ üê¢üëá:",
        reply_markup=keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞. –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
async def qrcode_command(message: types.Message):
    init_db()
    user_id = message.from_user.id
    username = message.from_user.username or "Unknown User"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    user_record_id = get_user_id(user_id)
    
    if user_record_id is None:
        user_record_id = add_user(username, user_id)
        if user_record_id is None:
            await message.reply("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
            return
        await message.reply("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        await message.reply("‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞
    qr_result = generate_qr(user_record_id)
    if qr_result is None:
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞!")
        return
    
    _, qr_file_path = qr_result  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É

    try:
        # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –≤ Aiogram 3.x
        from aiogram.types import FSInputFile
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
        photo = FSInputFile(qr_file_path)
        await message.reply_photo(
            photo=photo,
            caption=f"üéâ –í–∞—à QR-–∫–æ–¥, {username}!\n\n–ü—Ä–∏–≤—è–∑–∫–∞ ID: {user_record_id}"
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        await message.reply("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å QR-–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


async def operator(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /operator
        user_message = message.text.replace('/operator', '').strip()
        
        if not user_message:
            await message.reply("–ù–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–µ—Ä–µ–¥–∞—Ç—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /operator")
            return
        
        # –í–∞—à chat_id (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π ID)
        YOUR_CHAT_ID = 963221752  # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π chat_id
        username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ—Ç username"
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–º–Ω–µ –ø–æ–∫–∞)
        await message.bot.send_message(
            chat_id=YOUR_CHAT_ID,
            text=f"‚ö†Ô∏è –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                 f"ID: {username}\n"
                 f"–ò–º—è: {message.from_user.full_name}\n"
                 f"–°–æ–æ–±—â–µ–Ω–∏–µ: {user_message}"
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply("‚úÖ –Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ problem: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
